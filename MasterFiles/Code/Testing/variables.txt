# variables

clear_variables()
jump(tryme)

abc=13
assertEqual(abc,13)
abc= 12
assertEqual(abc,12)
abc =b
assertEqual(abc, b)

xx=10
xx++
assertEqual(xx,11)
xx--
assertEqual(xx,10)
xx+=3
assertEqual(xx,13)
xx-=6
assertEqual(xx,7)
xx+=-3
assertEqual(xx,4)
xx-=-7
assertEqual(xx,11)
xx -= -5
assertEqual(xx,16)
xx += -3
assertEqual(xx,13)

xx=abc
xx++  # should fail

prompt(Shall we continue? xx is abc? xx={xx})
p1 = [1,2,3,4,5,6]
p2 = p[1,2,3,4,5]
speed1 = 2.1
Jeff1 = fred 

assertEqual(xx,abc) # should pass
clear_variables()
assertEqual(xx,abc) # should fail

tryme:
foo1 = 123
foo2 = abc
using_java()
assertEqual(foo1 == 123) // should pass
foo1 = 246
foo1 = le_read_var('foo1')
le_print('foo1 = ' + foo1)
assertEqual(foo1 == 246) // should fail
assertEqual(foo1 == 123) // should pass
le_write_var('foo3', 'test1')
le_write_sysvar('foo4', 'test2')

using_lescript()
foo1 = 123
foo2 = abc
using_python()
assertEqual(foo1 == '123') # should pass
foo1 = 246
foo1 = le_read_var('foo1')
le_print('foo1 = ' + foo1)
assertEqual(foo1 == '246') # should fail
assertEqual(foo1 == '123') # should pass
le_write_var('foo5', 'test3')
le_write_sysvar('foo6', 'test4')


